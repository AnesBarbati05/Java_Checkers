import java.awt.Color;
import java.io.Serializable;
import javax.swing.JLabel;
import javax.swing.JOptionPane;


/**
 * This class represents the user interface of the game
 * 
 * @author edoar
 */
public class GameUI extends javax.swing.JPanel implements Serializable{
    
    /**
     * Matrix that represents the board on the GUI
     */
    private JLabel[][] lblBoard= new JLabel[8][8];
    
     /**
     * The logic of the game
     */
    public Logic logic;
    
    /**
     * Constant for the dark color of the square
     */
    private Color dark = new Color(168, 96, 44);
    
    /**
     * Constant for the light color of the square
     */
    private Color light = new Color(236, 208, 156);
    
    /**
     * Server for receive the board from the other player
     */
    Server server = new Server(this);
    
    /**
     * A score manager to manage the score of the player
     */
    ScoreManager scoreManager;
    
    
    
    /**
     * Creates new form GameUI
     * @param statisticsManager the statistics manager of the application
     */
    public GameUI(StatisticsManager statisticsManager) {
        initComponents();
        initBoard();
        server.start();
        scoreManager = new ScoreManager(lblTimer, lblScoreWhite, lblScoreBlack, statisticsManager);
        scoreManager.start();
    }
    
    /**
     * Receive the board from the oyher player
     */
    public void receiveBoard(){
        
        logic = server.logic;
        logic.switchTurn();
        logic.clearMarks();
        logic.lock = false;
        this.loadBoard();
        System.out.println("receiveBoard");
        
        showWinnerReceived();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnNewGame = new javax.swing.JButton();
        a = new javax.swing.JLabel();
        d = new javax.swing.JLabel();
        b = new javax.swing.JLabel();
        c = new javax.swing.JLabel();
        lblTimer = new javax.swing.JLabel();
        lblScoreWhite = new javax.swing.JLabel();
        lblScoreBlack = new javax.swing.JLabel();
        pnlBoard = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 2, 2, 0, new java.awt.Color(0, 0, 0)));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        btnNewGame.setText("Nuova Partita");
        btnNewGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnNewGameMousePressed(evt);
            }
        });

        a.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        a.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        a.setText("Punteggi");

        d.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        d.setText("Tempo");

        b.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        b.setText("Bianco");

        c.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        c.setText("Nero");

        lblTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTimer.setText("00:00");

        lblScoreWhite.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScoreWhite.setText("0");

        lblScoreBlack.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScoreBlack.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(48, 48, 48)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblScoreBlack, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblScoreWhite, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(btnNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblScoreWhite)
                            .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblScoreBlack)
                            .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addComponent(lblTimer))
                    .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                .addComponent(btnNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128))
        );

        pnlBoard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pnlBoard.setLayout(new java.awt.GridLayout(8, 8));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(pnlBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Set a new game initializing the board
     * @param evt the event of pressing the new game button
     */
    private void btnNewGameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewGameMousePressed
        // TODO add your handling code here:
        
        int scelta = JOptionPane.showConfirmDialog(null, "Vuoi iniziare una nuova partita?", "Conferma", JOptionPane.YES_NO_OPTION);
        
        if (scelta == JOptionPane.YES_OPTION) { 
            logic = new Logic();
            logic.endGame = false;
            loadBoard();
            logic.sendBoard();
        }
        
    }//GEN-LAST:event_btnNewGameMousePressed
    
    /**
     * Initialize a new board adding 64 labels to the GUI
     * and adding a name and mouse listener for every label,
     * so that when the player select a square the program can 
     * obtain the coordinates of that square
     */
    private void initBoard(){
        logic = new Logic();
        int cl=0;
        for(int i=7;i>=0;i--){
            cl++;
            for(int j=0;j<8;j++){
                JLabel label=new JLabel();
                
                if(cl%2==0){
                    label.setBackground(dark);
                }else{
                    label.setBackground(light);
                }
                label.setHorizontalAlignment((int) CENTER_ALIGNMENT);
                label.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent evt){
                        selectSquare(evt);
                    }
                });
                label.setOpaque(true);
                label.setName(i+":"+j);
                lblBoard[i][j]=label;
                pnlBoard.add(label);
                cl++;
            }
        }
        
        loadBoard();
    }
    
    /**
     * Load the board from the logic on the GUI
     */
    private void loadBoard(){
        int cl = 0;
        for(int i=7; i>=0; i--){
            cl++;
            for(int j=0; j<8; j++){
                if(logic.getTurn()){
                    if(cl%2==0)
                        lblBoard[i][j].setBackground(dark);
                    else
                        lblBoard[i][j].setBackground(light);
                }
                else{
                    if(cl%2!=0)
                        lblBoard[i][j].setBackground(dark);
                    else
                        lblBoard[i][j].setBackground(light);
                }
                cl++;
                
                
                if(logic.getBoard()[i][j].getSquareState().isWhite() && logic.getBoard()[i][j].getSquareState().isKing())
                    lblBoard[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/whiteK.png")));
                else if(logic.getBoard()[i][j].getSquareState().isBlack() && logic.getBoard()[i][j].getSquareState().isKing())
                    lblBoard[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/blackK.png")));
                else if(logic.getBoard()[i][j].getSquareState().isWhite())
                    lblBoard[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/white.png")));
                else if(logic.getBoard()[i][j].getSquareState().isBlack()){
                    lblBoard[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/black.png")));
                }else if(logic.getBoard()[i][j].getSquareState().isMarked()){
                    lblBoard[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/marked.png")));
                }
                else{
                    lblBoard[i][j].setIcon(null);
                }
            }
        }
            
    }
    
    /**
     * Select a square on the board and check if someone has win the game
     * @param evt the event of selection of the square
     */
    private void selectSquare(java.awt.event.MouseEvent evt){
        
        String name=((JLabel)evt.getSource()).getName();
        int i=Integer.parseInt(name.charAt(0)+"");
        int j=Integer.parseInt(name.charAt(2)+"");
        
        if(!logic.endGame){
           logic.selectSquare(i, j);
            System.out.println(logic);
            loadBoard();
            System.out.println("loose = " + logic.checkLooser() + "   turno:  " + logic.getTurn());

            

            showWinnerSelected();
        }
        else {
           JOptionPane.showMessageDialog(this, "Partita terminata"); 
        }
        
    }
    
    /**
     * show the winner of the game and updates the statistics whe the player has won selecting a square
     */
    private void showWinnerSelected() {
        switch(logic.checkLooser()){
                case 1:
                    JOptionPane.showMessageDialog(this, "WINNER: black");
                    scoreManager.setTurn(!logic.getTurn());
                    scoreManager.setScore(false);
                    logic.endGame = true;
                break;
                case 2:
                    JOptionPane.showMessageDialog(this, "WINNER: white");
                    scoreManager.setTurn(!logic.getTurn());
                    scoreManager.setScore(true);
                    logic.endGame = true;
                break;
        } 
    }
    
    /**
     * show the winner of the game and updates the statistics whe the player has won receiving the board
     */
    private void showWinnerReceived(){
        switch(logic.checkLooser()){
                case 1:
                    JOptionPane.showMessageDialog(this, "WINNER: black");
                    scoreManager.setTurn(logic.getTurn());
                    scoreManager.setScore(false);
                    logic.endGame = true;
                break;
                case 2:
                    JOptionPane.showMessageDialog(this, "WINNER: white");
                    scoreManager.setTurn(logic.getTurn());
                    scoreManager.setScore(true);
                    logic.endGame = true;
                break;
        } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel a;
    private javax.swing.JLabel b;
    private javax.swing.JButton btnNewGame;
    private javax.swing.JLabel c;
    private javax.swing.JLabel d;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblScoreBlack;
    private javax.swing.JLabel lblScoreWhite;
    private javax.swing.JLabel lblTimer;
    private javax.swing.JPanel pnlBoard;
    // End of variables declaration//GEN-END:variables
}
